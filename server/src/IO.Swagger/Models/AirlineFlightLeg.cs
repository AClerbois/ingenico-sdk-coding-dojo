/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AirlineFlightLeg : Dictionary<String, Object>, IEquatable<AirlineFlightLeg>
    { 
        /// <summary>
        /// Gets or Sets AirlineClass
        /// </summary>
        [DataMember(Name="airlineClass")]
        public string AirlineClass { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalAirport
        /// </summary>
        [DataMember(Name="arrivalAirport")]
        public string ArrivalAirport { get; set; }

        /// <summary>
        /// Gets or Sets ArrivalTime
        /// </summary>
        [DataMember(Name="arrivalTime")]
        public string ArrivalTime { get; set; }

        /// <summary>
        /// Gets or Sets CarrierCode
        /// </summary>
        [DataMember(Name="carrierCode")]
        public string CarrierCode { get; set; }

        /// <summary>
        /// Gets or Sets ConjunctionTicket
        /// </summary>
        [DataMember(Name="conjunctionTicket")]
        public string ConjunctionTicket { get; set; }

        /// <summary>
        /// Gets or Sets CouponNumber
        /// </summary>
        [DataMember(Name="couponNumber")]
        public string CouponNumber { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name="departureTime")]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets EndorsementOrRestriction
        /// </summary>
        [DataMember(Name="endorsementOrRestriction")]
        public string EndorsementOrRestriction { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeTicket
        /// </summary>
        [DataMember(Name="exchangeTicket")]
        public string ExchangeTicket { get; set; }

        /// <summary>
        /// Gets or Sets Fare
        /// </summary>
        [DataMember(Name="fare")]
        public string Fare { get; set; }

        /// <summary>
        /// Gets or Sets FareBasis
        /// </summary>
        [DataMember(Name="fareBasis")]
        public string FareBasis { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee")]
        public int? Fee { get; set; }

        /// <summary>
        /// Gets or Sets FlightNumber
        /// </summary>
        [DataMember(Name="flightNumber")]
        public string FlightNumber { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number")]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets OriginAirport
        /// </summary>
        [DataMember(Name="originAirport")]
        public string OriginAirport { get; set; }

        /// <summary>
        /// Gets or Sets PassengerClass
        /// </summary>
        [DataMember(Name="passengerClass")]
        public string PassengerClass { get; set; }

        /// <summary>
        /// Gets or Sets ServiceClass
        /// </summary>
        [DataMember(Name="serviceClass")]
        public string ServiceClass { get; set; }

        /// <summary>
        /// Gets or Sets StopoverCode
        /// </summary>
        [DataMember(Name="stopoverCode")]
        public string StopoverCode { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes")]
        public int? Taxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AirlineFlightLeg {\n");
            sb.Append("  AirlineClass: ").Append(AirlineClass).Append("\n");
            sb.Append("  ArrivalAirport: ").Append(ArrivalAirport).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
            sb.Append("  ConjunctionTicket: ").Append(ConjunctionTicket).Append("\n");
            sb.Append("  CouponNumber: ").Append(CouponNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  EndorsementOrRestriction: ").Append(EndorsementOrRestriction).Append("\n");
            sb.Append("  ExchangeTicket: ").Append(ExchangeTicket).Append("\n");
            sb.Append("  Fare: ").Append(Fare).Append("\n");
            sb.Append("  FareBasis: ").Append(FareBasis).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OriginAirport: ").Append(OriginAirport).Append("\n");
            sb.Append("  PassengerClass: ").Append(PassengerClass).Append("\n");
            sb.Append("  ServiceClass: ").Append(ServiceClass).Append("\n");
            sb.Append("  StopoverCode: ").Append(StopoverCode).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AirlineFlightLeg)obj);
        }

        /// <summary>
        /// Returns true if AirlineFlightLeg instances are equal
        /// </summary>
        /// <param name="other">Instance of AirlineFlightLeg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AirlineFlightLeg other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AirlineClass == other.AirlineClass ||
                    AirlineClass != null &&
                    AirlineClass.Equals(other.AirlineClass)
                ) && 
                (
                    ArrivalAirport == other.ArrivalAirport ||
                    ArrivalAirport != null &&
                    ArrivalAirport.Equals(other.ArrivalAirport)
                ) && 
                (
                    ArrivalTime == other.ArrivalTime ||
                    ArrivalTime != null &&
                    ArrivalTime.Equals(other.ArrivalTime)
                ) && 
                (
                    CarrierCode == other.CarrierCode ||
                    CarrierCode != null &&
                    CarrierCode.Equals(other.CarrierCode)
                ) && 
                (
                    ConjunctionTicket == other.ConjunctionTicket ||
                    ConjunctionTicket != null &&
                    ConjunctionTicket.Equals(other.ConjunctionTicket)
                ) && 
                (
                    CouponNumber == other.CouponNumber ||
                    CouponNumber != null &&
                    CouponNumber.Equals(other.CouponNumber)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    DepartureTime == other.DepartureTime ||
                    DepartureTime != null &&
                    DepartureTime.Equals(other.DepartureTime)
                ) && 
                (
                    EndorsementOrRestriction == other.EndorsementOrRestriction ||
                    EndorsementOrRestriction != null &&
                    EndorsementOrRestriction.Equals(other.EndorsementOrRestriction)
                ) && 
                (
                    ExchangeTicket == other.ExchangeTicket ||
                    ExchangeTicket != null &&
                    ExchangeTicket.Equals(other.ExchangeTicket)
                ) && 
                (
                    Fare == other.Fare ||
                    Fare != null &&
                    Fare.Equals(other.Fare)
                ) && 
                (
                    FareBasis == other.FareBasis ||
                    FareBasis != null &&
                    FareBasis.Equals(other.FareBasis)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.Equals(other.Fee)
                ) && 
                (
                    FlightNumber == other.FlightNumber ||
                    FlightNumber != null &&
                    FlightNumber.Equals(other.FlightNumber)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    OriginAirport == other.OriginAirport ||
                    OriginAirport != null &&
                    OriginAirport.Equals(other.OriginAirport)
                ) && 
                (
                    PassengerClass == other.PassengerClass ||
                    PassengerClass != null &&
                    PassengerClass.Equals(other.PassengerClass)
                ) && 
                (
                    ServiceClass == other.ServiceClass ||
                    ServiceClass != null &&
                    ServiceClass.Equals(other.ServiceClass)
                ) && 
                (
                    StopoverCode == other.StopoverCode ||
                    StopoverCode != null &&
                    StopoverCode.Equals(other.StopoverCode)
                ) && 
                (
                    Taxes == other.Taxes ||
                    Taxes != null &&
                    Taxes.Equals(other.Taxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AirlineClass != null)
                    hashCode = hashCode * 59 + AirlineClass.GetHashCode();
                    if (ArrivalAirport != null)
                    hashCode = hashCode * 59 + ArrivalAirport.GetHashCode();
                    if (ArrivalTime != null)
                    hashCode = hashCode * 59 + ArrivalTime.GetHashCode();
                    if (CarrierCode != null)
                    hashCode = hashCode * 59 + CarrierCode.GetHashCode();
                    if (ConjunctionTicket != null)
                    hashCode = hashCode * 59 + ConjunctionTicket.GetHashCode();
                    if (CouponNumber != null)
                    hashCode = hashCode * 59 + CouponNumber.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DepartureTime != null)
                    hashCode = hashCode * 59 + DepartureTime.GetHashCode();
                    if (EndorsementOrRestriction != null)
                    hashCode = hashCode * 59 + EndorsementOrRestriction.GetHashCode();
                    if (ExchangeTicket != null)
                    hashCode = hashCode * 59 + ExchangeTicket.GetHashCode();
                    if (Fare != null)
                    hashCode = hashCode * 59 + Fare.GetHashCode();
                    if (FareBasis != null)
                    hashCode = hashCode * 59 + FareBasis.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (FlightNumber != null)
                    hashCode = hashCode * 59 + FlightNumber.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (OriginAirport != null)
                    hashCode = hashCode * 59 + OriginAirport.GetHashCode();
                    if (PassengerClass != null)
                    hashCode = hashCode * 59 + PassengerClass.GetHashCode();
                    if (ServiceClass != null)
                    hashCode = hashCode * 59 + ServiceClass.GetHashCode();
                    if (StopoverCode != null)
                    hashCode = hashCode * 59 + StopoverCode.GetHashCode();
                    if (Taxes != null)
                    hashCode = hashCode * 59 + Taxes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AirlineFlightLeg left, AirlineFlightLeg right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AirlineFlightLeg left, AirlineFlightLeg right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

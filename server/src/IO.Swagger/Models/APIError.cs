/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Contains detailed information on one single error.
    /// </summary>
    [DataContract]
    public partial class APIError : Dictionary<String, Object>, IEquatable<APIError>
    { 
        /// <summary>
        /// Category the error belongs to. The category should give an indication of the type of error you are dealing with. Possible values: * CONNECT_PLATFORM_ERROR - indicating that a functional error has occurred in the platform. * PAYMENT_PLATFORM_ERROR - indicating that a functional error has occurred in the Payment platform. * IO_ERROR - indicating that a technical error has occurred within the Direct platform or between Direct and any of the payment platforms or third party systems.
        /// </summary>
        /// <value>Category the error belongs to. The category should give an indication of the type of error you are dealing with. Possible values: * CONNECT_PLATFORM_ERROR - indicating that a functional error has occurred in the platform. * PAYMENT_PLATFORM_ERROR - indicating that a functional error has occurred in the Payment platform. * IO_ERROR - indicating that a technical error has occurred within the Direct platform or between Direct and any of the payment platforms or third party systems.</value>
        [DataMember(Name="category")]
        public string Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>
        /// <value>Error code</value>
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// HTTP status code for this error that can be used to determine the type of error
        /// </summary>
        /// <value>HTTP status code for this error that can be used to determine the type of error</value>
        [DataMember(Name="httpStatusCode")]
        public int? HttpStatusCode { get; set; }

        /// <summary>
        /// ID of the error. This is a short human-readable message that briefly describes the error.
        /// </summary>
        /// <value>ID of the error. This is a short human-readable message that briefly describes the error.</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Human-readable error message that is not meant to be relayed to customer as it might tip off people who are trying to commit fraud
        /// </summary>
        /// <value>Human-readable error message that is not meant to be relayed to customer as it might tip off people who are trying to commit fraud</value>
        [DataMember(Name="message")]
        public string Message { get; set; }

        /// <summary>
        /// Returned only if the error relates to a value that was missing or incorrect.  Contains a location path to the value as a JSonata query.  Some common examples: * a.b selects the value of property b of root property a, * a[1] selects the first element of the array in root property a, * a[b&#x3D;&#39;some value&#39;] selects all elements of the array in root property a that have a property b with value &#39;some value&#39;.
        /// </summary>
        /// <value>Returned only if the error relates to a value that was missing or incorrect.  Contains a location path to the value as a JSonata query.  Some common examples: * a.b selects the value of property b of root property a, * a[1] selects the first element of the array in root property a, * a[b&#x3D;&#39;some value&#39;] selects all elements of the array in root property a that have a property b with value &#39;some value&#39;.</value>
        [DataMember(Name="propertyName")]
        public string PropertyName { get; set; }

        /// <summary>
        /// ID of the request that can be used for debugging purposes
        /// </summary>
        /// <value>ID of the request that can be used for debugging purposes</value>
        [DataMember(Name="requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class APIError {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  HttpStatusCode: ").Append(HttpStatusCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((APIError)obj);
        }

        /// <summary>
        /// Returns true if APIError instances are equal
        /// </summary>
        /// <param name="other">Instance of APIError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(APIError other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    HttpStatusCode == other.HttpStatusCode ||
                    HttpStatusCode != null &&
                    HttpStatusCode.Equals(other.HttpStatusCode)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    PropertyName == other.PropertyName ||
                    PropertyName != null &&
                    PropertyName.Equals(other.PropertyName)
                ) && 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (HttpStatusCode != null)
                    hashCode = hashCode * 59 + HttpStatusCode.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (PropertyName != null)
                    hashCode = hashCode * 59 + PropertyName.GetHashCode();
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(APIError left, APIError right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(APIError left, APIError right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

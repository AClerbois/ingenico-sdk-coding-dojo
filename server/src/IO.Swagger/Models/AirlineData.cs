/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AirlineData : Dictionary<String, Object>, IEquatable<AirlineData>
    { 
        /// <summary>
        /// Gets or Sets AgentNumericCode
        /// </summary>
        [DataMember(Name="agentNumericCode")]
        public string AgentNumericCode { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets FlightDate
        /// </summary>
        [DataMember(Name="flightDate")]
        public string FlightDate { get; set; }

        /// <summary>
        /// Gets or Sets FlightLegs
        /// </summary>
        [DataMember(Name="flightLegs")]
        public List<AirlineFlightLeg> FlightLegs { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsETicket
        /// </summary>
        [DataMember(Name="isETicket")]
        public bool? IsETicket { get; set; }

        /// <summary>
        /// Gets or Sets IsRegisteredCustomer
        /// </summary>
        [DataMember(Name="isRegisteredCustomer")]
        public bool? IsRegisteredCustomer { get; set; }

        /// <summary>
        /// Gets or Sets IsRestrictedTicket
        /// </summary>
        [DataMember(Name="isRestrictedTicket")]
        public bool? IsRestrictedTicket { get; set; }

        /// <summary>
        /// Gets or Sets IsThirdParty
        /// </summary>
        [DataMember(Name="isThirdParty")]
        public bool? IsThirdParty { get; set; }

        /// <summary>
        /// Gets or Sets IssueDate
        /// </summary>
        [DataMember(Name="issueDate")]
        public string IssueDate { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCustomerId
        /// </summary>
        [DataMember(Name="merchantCustomerId")]
        public string MerchantCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PassengerName
        /// </summary>
        [DataMember(Name="passengerName")]
        public string PassengerName { get; set; }

        /// <summary>
        /// Gets or Sets Passengers
        /// </summary>
        [DataMember(Name="passengers")]
        public List<AirlinePassenger> Passengers { get; set; }

        /// <summary>
        /// Gets or Sets PlaceOfIssue
        /// </summary>
        [DataMember(Name="placeOfIssue")]
        public string PlaceOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets Pnr
        /// </summary>
        [DataMember(Name="pnr")]
        public string Pnr { get; set; }

        /// <summary>
        /// Gets or Sets PointOfSale
        /// </summary>
        [DataMember(Name="pointOfSale")]
        public string PointOfSale { get; set; }

        /// <summary>
        /// Gets or Sets PosCityCode
        /// </summary>
        [DataMember(Name="posCityCode")]
        public string PosCityCode { get; set; }

        /// <summary>
        /// Gets or Sets TicketDeliveryMethod
        /// </summary>
        [DataMember(Name="ticketDeliveryMethod")]
        public string TicketDeliveryMethod { get; set; }

        /// <summary>
        /// Gets or Sets TicketNumber
        /// </summary>
        [DataMember(Name="ticketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Gets or Sets TotalFare
        /// </summary>
        [DataMember(Name="totalFare")]
        public int? TotalFare { get; set; }

        /// <summary>
        /// Gets or Sets TotalFee
        /// </summary>
        [DataMember(Name="totalFee")]
        public int? TotalFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalTaxes
        /// </summary>
        [DataMember(Name="totalTaxes")]
        public int? TotalTaxes { get; set; }

        /// <summary>
        /// Gets or Sets TravelAgencyName
        /// </summary>
        [DataMember(Name="travelAgencyName")]
        public string TravelAgencyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AirlineData {\n");
            sb.Append("  AgentNumericCode: ").Append(AgentNumericCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  FlightDate: ").Append(FlightDate).Append("\n");
            sb.Append("  FlightLegs: ").Append(FlightLegs).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  IsETicket: ").Append(IsETicket).Append("\n");
            sb.Append("  IsRegisteredCustomer: ").Append(IsRegisteredCustomer).Append("\n");
            sb.Append("  IsRestrictedTicket: ").Append(IsRestrictedTicket).Append("\n");
            sb.Append("  IsThirdParty: ").Append(IsThirdParty).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  MerchantCustomerId: ").Append(MerchantCustomerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PassengerName: ").Append(PassengerName).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  PlaceOfIssue: ").Append(PlaceOfIssue).Append("\n");
            sb.Append("  Pnr: ").Append(Pnr).Append("\n");
            sb.Append("  PointOfSale: ").Append(PointOfSale).Append("\n");
            sb.Append("  PosCityCode: ").Append(PosCityCode).Append("\n");
            sb.Append("  TicketDeliveryMethod: ").Append(TicketDeliveryMethod).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  TotalFare: ").Append(TotalFare).Append("\n");
            sb.Append("  TotalFee: ").Append(TotalFee).Append("\n");
            sb.Append("  TotalTaxes: ").Append(TotalTaxes).Append("\n");
            sb.Append("  TravelAgencyName: ").Append(TravelAgencyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AirlineData)obj);
        }

        /// <summary>
        /// Returns true if AirlineData instances are equal
        /// </summary>
        /// <param name="other">Instance of AirlineData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AirlineData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AgentNumericCode == other.AgentNumericCode ||
                    AgentNumericCode != null &&
                    AgentNumericCode.Equals(other.AgentNumericCode)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    FlightDate == other.FlightDate ||
                    FlightDate != null &&
                    FlightDate.Equals(other.FlightDate)
                ) && 
                (
                    FlightLegs == other.FlightLegs ||
                    FlightLegs != null &&
                    FlightLegs.SequenceEqual(other.FlightLegs)
                ) && 
                (
                    InvoiceNumber == other.InvoiceNumber ||
                    InvoiceNumber != null &&
                    InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    IsETicket == other.IsETicket ||
                    IsETicket != null &&
                    IsETicket.Equals(other.IsETicket)
                ) && 
                (
                    IsRegisteredCustomer == other.IsRegisteredCustomer ||
                    IsRegisteredCustomer != null &&
                    IsRegisteredCustomer.Equals(other.IsRegisteredCustomer)
                ) && 
                (
                    IsRestrictedTicket == other.IsRestrictedTicket ||
                    IsRestrictedTicket != null &&
                    IsRestrictedTicket.Equals(other.IsRestrictedTicket)
                ) && 
                (
                    IsThirdParty == other.IsThirdParty ||
                    IsThirdParty != null &&
                    IsThirdParty.Equals(other.IsThirdParty)
                ) && 
                (
                    IssueDate == other.IssueDate ||
                    IssueDate != null &&
                    IssueDate.Equals(other.IssueDate)
                ) && 
                (
                    MerchantCustomerId == other.MerchantCustomerId ||
                    MerchantCustomerId != null &&
                    MerchantCustomerId.Equals(other.MerchantCustomerId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PassengerName == other.PassengerName ||
                    PassengerName != null &&
                    PassengerName.Equals(other.PassengerName)
                ) && 
                (
                    Passengers == other.Passengers ||
                    Passengers != null &&
                    Passengers.SequenceEqual(other.Passengers)
                ) && 
                (
                    PlaceOfIssue == other.PlaceOfIssue ||
                    PlaceOfIssue != null &&
                    PlaceOfIssue.Equals(other.PlaceOfIssue)
                ) && 
                (
                    Pnr == other.Pnr ||
                    Pnr != null &&
                    Pnr.Equals(other.Pnr)
                ) && 
                (
                    PointOfSale == other.PointOfSale ||
                    PointOfSale != null &&
                    PointOfSale.Equals(other.PointOfSale)
                ) && 
                (
                    PosCityCode == other.PosCityCode ||
                    PosCityCode != null &&
                    PosCityCode.Equals(other.PosCityCode)
                ) && 
                (
                    TicketDeliveryMethod == other.TicketDeliveryMethod ||
                    TicketDeliveryMethod != null &&
                    TicketDeliveryMethod.Equals(other.TicketDeliveryMethod)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    TotalFare == other.TotalFare ||
                    TotalFare != null &&
                    TotalFare.Equals(other.TotalFare)
                ) && 
                (
                    TotalFee == other.TotalFee ||
                    TotalFee != null &&
                    TotalFee.Equals(other.TotalFee)
                ) && 
                (
                    TotalTaxes == other.TotalTaxes ||
                    TotalTaxes != null &&
                    TotalTaxes.Equals(other.TotalTaxes)
                ) && 
                (
                    TravelAgencyName == other.TravelAgencyName ||
                    TravelAgencyName != null &&
                    TravelAgencyName.Equals(other.TravelAgencyName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AgentNumericCode != null)
                    hashCode = hashCode * 59 + AgentNumericCode.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (FlightDate != null)
                    hashCode = hashCode * 59 + FlightDate.GetHashCode();
                    if (FlightLegs != null)
                    hashCode = hashCode * 59 + FlightLegs.GetHashCode();
                    if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                    if (IsETicket != null)
                    hashCode = hashCode * 59 + IsETicket.GetHashCode();
                    if (IsRegisteredCustomer != null)
                    hashCode = hashCode * 59 + IsRegisteredCustomer.GetHashCode();
                    if (IsRestrictedTicket != null)
                    hashCode = hashCode * 59 + IsRestrictedTicket.GetHashCode();
                    if (IsThirdParty != null)
                    hashCode = hashCode * 59 + IsThirdParty.GetHashCode();
                    if (IssueDate != null)
                    hashCode = hashCode * 59 + IssueDate.GetHashCode();
                    if (MerchantCustomerId != null)
                    hashCode = hashCode * 59 + MerchantCustomerId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PassengerName != null)
                    hashCode = hashCode * 59 + PassengerName.GetHashCode();
                    if (Passengers != null)
                    hashCode = hashCode * 59 + Passengers.GetHashCode();
                    if (PlaceOfIssue != null)
                    hashCode = hashCode * 59 + PlaceOfIssue.GetHashCode();
                    if (Pnr != null)
                    hashCode = hashCode * 59 + Pnr.GetHashCode();
                    if (PointOfSale != null)
                    hashCode = hashCode * 59 + PointOfSale.GetHashCode();
                    if (PosCityCode != null)
                    hashCode = hashCode * 59 + PosCityCode.GetHashCode();
                    if (TicketDeliveryMethod != null)
                    hashCode = hashCode * 59 + TicketDeliveryMethod.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (TotalFare != null)
                    hashCode = hashCode * 59 + TotalFare.GetHashCode();
                    if (TotalFee != null)
                    hashCode = hashCode * 59 + TotalFee.GetHashCode();
                    if (TotalTaxes != null)
                    hashCode = hashCode * 59 + TotalTaxes.GetHashCode();
                    if (TravelAgencyName != null)
                    hashCode = hashCode * 59 + TravelAgencyName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AirlineData left, AirlineData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AirlineData left, AirlineData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

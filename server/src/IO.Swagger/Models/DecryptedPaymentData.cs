/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The payment data if you do the decryption of the encrypted payment data yourself.
    /// </summary>
    [DataContract]
    public partial class DecryptedPaymentData : Dictionary<String, Object>, IEquatable<DecryptedPaymentData>
    { 
        /// <summary>
        /// Card holder&#39;s name on the card.   * For Apple Pay, maps to the cardholderName property in the encrypted payment data.
        /// </summary>
        /// <value>Card holder&#39;s name on the card.   * For Apple Pay, maps to the cardholderName property in the encrypted payment data.</value>
        [DataMember(Name="cardholderName")]
        public string CardholderName { get; set; }

        /// <summary>
        /// The 3D secure online payment cryptogram.   * For Apple Pay, maps to the paymentData.onlinePaymentCryptogram property in the encrypted payment data.
        /// </summary>
        /// <value>The 3D secure online payment cryptogram.   * For Apple Pay, maps to the paymentData.onlinePaymentCryptogram property in the encrypted payment data.</value>
        [DataMember(Name="cryptogram")]
        public string Cryptogram { get; set; }

        /// <summary>
        /// The device specific PAN.   * For Apple Pay, maps to the applicationPrimaryAccountNumber property in the encrypted payment.
        /// </summary>
        /// <value>The device specific PAN.   * For Apple Pay, maps to the applicationPrimaryAccountNumber property in the encrypted payment.</value>
        [DataMember(Name="dpan")]
        public string Dpan { get; set; }

        /// <summary>
        /// Electronic Commerce Indicator.   * For Apple Pay, maps to the paymentData.eciIndicator property in the encrypted payment data.
        /// </summary>
        /// <value>Electronic Commerce Indicator.   * For Apple Pay, maps to the paymentData.eciIndicator property in the encrypted payment data.</value>
        [DataMember(Name="eci")]
        public int? Eci { get; set; }

        /// <summary>
        /// Expiry date of the card Format: MMYY.   * For Apple Pay, maps to the applicationExpirationDate property in the encrypted payment data. This property is formatted as YYMMDD, so this needs to be converted to get a correctly formatted expiry date
        /// </summary>
        /// <value>Expiry date of the card Format: MMYY.   * For Apple Pay, maps to the applicationExpirationDate property in the encrypted payment data. This property is formatted as YYMMDD, so this needs to be converted to get a correctly formatted expiry date</value>
        [DataMember(Name="expiryDate")]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecryptedPaymentData {\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("  Cryptogram: ").Append(Cryptogram).Append("\n");
            sb.Append("  Dpan: ").Append(Dpan).Append("\n");
            sb.Append("  Eci: ").Append(Eci).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DecryptedPaymentData)obj);
        }

        /// <summary>
        /// Returns true if DecryptedPaymentData instances are equal
        /// </summary>
        /// <param name="other">Instance of DecryptedPaymentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecryptedPaymentData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CardholderName == other.CardholderName ||
                    CardholderName != null &&
                    CardholderName.Equals(other.CardholderName)
                ) && 
                (
                    Cryptogram == other.Cryptogram ||
                    Cryptogram != null &&
                    Cryptogram.Equals(other.Cryptogram)
                ) && 
                (
                    Dpan == other.Dpan ||
                    Dpan != null &&
                    Dpan.Equals(other.Dpan)
                ) && 
                (
                    Eci == other.Eci ||
                    Eci != null &&
                    Eci.Equals(other.Eci)
                ) && 
                (
                    ExpiryDate == other.ExpiryDate ||
                    ExpiryDate != null &&
                    ExpiryDate.Equals(other.ExpiryDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CardholderName != null)
                    hashCode = hashCode * 59 + CardholderName.GetHashCode();
                    if (Cryptogram != null)
                    hashCode = hashCode * 59 + Cryptogram.GetHashCode();
                    if (Dpan != null)
                    hashCode = hashCode * 59 + Dpan.GetHashCode();
                    if (Eci != null)
                    hashCode = hashCode * 59 + Eci.GetHashCode();
                    if (ExpiryDate != null)
                    hashCode = hashCode * 59 + ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DecryptedPaymentData left, DecryptedPaymentData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DecryptedPaymentData left, DecryptedPaymentData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

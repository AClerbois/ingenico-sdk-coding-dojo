/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Ingenico.Direct.Fake.Attributes;
using Ingenico.Direct.Fake.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;

namespace Ingenico.Direct.Fake.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PaymentsApiController : ControllerBase
    {
        /// <summary>
        /// Cancel a payment
        /// </summary>
        /// <remarks>If you decided that you don&#39;t want to process the payment it is always smart to cancel the payment. This makes it impossible to process the payment any further and will also try to reverse an authorization on a card. Reversing an authorization that you will not be utilizing will prevent you from having to pay a fee/penalty for unused authorization requests.  Whilst scheme regulations require that acquirers (and their providers, like us) support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore there is no guarantee the authorization hold is released. Also be aware that the issuer needs time to process the request. The funds may not be unblocked immediately even whilst the request is sent real-time. For any authorization reversal request initiated by a merchant, we will pass the request through to an acquirer for subsequent submission to the card issuer for processing.  The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  There is no guarantee that the card issuer will process the authorization reversal, nor is there any guarantee that the authorization reversal will occur in real-time. Neither we nor any of its affiliates will be liable to a merchant for any costs, losses and/or damages arising out of a card issuer not processing or delaying to process an authorization reversal request.</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <response code="200">The payment has been cancelled. Some acquirers/issuers will provide some feedback in case a reversal of the authorization has been performed.</response>
        /// <response code="400">Incorrect input data</response>
        /// <response code="402">Payment required</response>
        /// <response code="404">Payment was not found</response>
        /// <response code="409">Cancellation is not allowed because payment is closed</response>
        /// <response code="500">Internal server exception</response>
        [HttpPost]
        [Route("/v1/{merchantId}/payments/{paymentId}/cancel")]
        [ValidateModelState]
        [SwaggerOperation("CancelsCancel")]
        [SwaggerResponse(statusCode: 200, type: typeof(CancelPaymentResponse), description: "The payment has been cancelled. Some acquirers/issuers will provide some feedback in case a reversal of the authorization has been performed.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Incorrect input data")]
        [SwaggerResponse(statusCode: 402, type: typeof(ErrorResponse), description: "Payment required")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Payment was not found")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Cancellation is not allowed because payment is closed")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Internal server exception")]
        public virtual IActionResult CancelsCancel([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CancelPaymentResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 402 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(402, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"mobilePaymentMethodSpecificOutput\" : {\n    \"voidResponseId\" : \"voidResponseId\"\n  },\n  \"payment\" : \"\",\n  \"cardPaymentMethodSpecificOutput\" : {\n    \"voidResponseId\" : \"voidResponseId\"\n  }\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CancelPaymentResponse>(exampleJson)
            : default(CancelPaymentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>When you want to capture the funds on a payment with a PENDING_CAPTURE state you can call this API. This API allows multiple, partial captures of the authorized funds. Depending on the payment product and the 3rd party used to process the payment this might be done in real-time or in more off-line, batch-like fashion.  If the created payment requires approval then it will require this step before the funds are actually captured.  PENDING_CAPTURE is only a common status with card transactions. You can specify the amount you would like to be captured in case you want to capture a lower amount than the authorized amount.</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <param name="capturePaymentRequest"></param>
        /// <response code="201">Successful response, payment has been captured</response>
        [HttpPost]
        [Route("/v1/{merchantId}/payments/{paymentId}/capture")]
        [ValidateModelState]
        [SwaggerOperation("CapturesCapture")]
        [SwaggerResponse(statusCode: 201, type: typeof(CaptureResponse), description: "Successful response, payment has been captured")]
        public virtual IActionResult CapturesCapture([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId, [FromBody]CapturePaymentRequest capturePaymentRequest)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(CaptureResponse));

            string exampleJson = null;
            exampleJson = "\"\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CaptureResponse>(exampleJson)
            : default(CaptureResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get captures of payment
        /// </summary>
        /// <remarks>Retrieves the details of all captures performed on the payment with the paymentId provided in the URL</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <response code="200">An HTTP 200 response is returned if the payment was found, even if no captures were performed on it.</response>
        [HttpGet]
        [Route("/v1/{merchantId}/payments/{paymentId}/captures")]
        [ValidateModelState]
        [SwaggerOperation("CapturesGetCaptures")]
        [SwaggerResponse(statusCode: 200, type: typeof(CapturesResponse), description: "An HTTP 200 response is returned if the payment was found, even if no captures were performed on it.")]
        public virtual IActionResult CapturesGetCaptures([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CapturesResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"captures\" : [ \"\", \"\" ]\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CapturesResponse>(exampleJson)
            : default(CapturesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>You initiate a payment by posting all the required payment details. After you have done so one or more of the following things can take place:  * Your payment request is rejected. This can happen for various reasons, but a detailed reason is always returned in the response to you. In some cases a payment object was created and you will find all the details in the response as well.  * The data you submitted used to assess the risk of potential fraud. If this is deemed to great based on your configuration the transaction is either rejected or placed in a queue for your manual review. If the fraud risk is deemed to be within the acceptable set limits the processing is continued and one of the other possible outcomes listed here will be returned.  * The data is sent to a third party for authorization  * The consumer is required to authenticate themselves and a redirect to a third party is required, sometimes this also includes the actual authorization of the payment by the consumer while at the third party. The response will contain all the details required for you to redirect the consumer to the third party.  * Payment instruction details are returned so you can provide the right instructions to your consumer on how to complete the payment.  * The data is simply stored for future processing.  Please look at the flow diagram of each payment product that you would like to integrate to see what possible responses can be returned to you depending on the payment product.  The type of processing flow is also dependent on the individual configuration of your account(s). This will be chosen in conjunction with you to best match your business</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="request"></param>
        /// <response code="200">The payment request was successfully processed and a payment object was created.</response>
        /// <response code="400">The request was malformed or was missing required data. When a required property was missing the error message will point out which property caused the error.</response>
        /// <response code="402">The payment was declined by a 3rd party (acquirer, payment processor, etc.)</response>
        /// <response code="403">You are not allowed to access the service or account or your API authentication failed.</response>
        /// <response code="404">Payment not found</response>
        /// <response code="409">Conflict</response>
        /// <response code="502">Any 5XX response points to something that went wrong on our end. This could also be that the system was unable to route the transaction to an appropriate acquirer/3rd party. Another reason for such a response if when the 3rd party&#39;s response could not be understood.</response>
        /// <response code="503">Service unavailable</response>
        [HttpPost]
        [Route("/v1/{merchantId}/payments")]
        [ValidateModelState]
        [SwaggerOperation("PaymentsCreatePayment")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreatePaymentResponse), description: "The payment request was successfully processed and a payment object was created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(PaymentErrorResponse), description: "The request was malformed or was missing required data. When a required property was missing the error message will point out which property caused the error.")]
        [SwaggerResponse(statusCode: 402, type: typeof(PaymentErrorResponse), description: "The payment was declined by a 3rd party (acquirer, payment processor, etc.)")]
        [SwaggerResponse(statusCode: 403, type: typeof(PaymentErrorResponse), description: "You are not allowed to access the service or account or your API authentication failed.")]
        [SwaggerResponse(statusCode: 404, type: typeof(PaymentErrorResponse), description: "Payment not found")]
        [SwaggerResponse(statusCode: 409, type: typeof(PaymentErrorResponse), description: "Conflict")]
        [SwaggerResponse(statusCode: 502, type: typeof(PaymentErrorResponse), description: "Any 5XX response points to something that went wrong on our end. This could also be that the system was unable to route the transaction to an appropriate acquirer/3rd party. Another reason for such a response if when the 3rd party&#39;s response could not be understood.")]
        [SwaggerResponse(statusCode: 503, type: typeof(PaymentErrorResponse), description: "Service unavailable")]
        public virtual IActionResult PaymentsCreatePayment([FromRoute][Required]string merchantId, [FromBody]CreatePaymentRequest request)
        {
            if (request?.Order?.AmountOfMoney?.Amount.HasValue ?? false)
            {
                switch (request.Order.AmountOfMoney.Amount.Value)
                {
                    case 200: return StatusCode(200, default(CreatePaymentResponse));
                    case 400: return StatusCode(400, default(PaymentErrorResponse));
                    case 402: return StatusCode(402, default(PaymentErrorResponse));
                    case 403: return StatusCode(403, default(PaymentErrorResponse));
                    case 404: return StatusCode(404, default(PaymentErrorResponse));
                    case 409: return StatusCode(409, default(PaymentErrorResponse));
                    case 502: return StatusCode(502, default(PaymentErrorResponse));
                    case 503: return StatusCode(503, default(PaymentErrorResponse));

                    default:
                        break;
                }
            }

            string exampleJson = null;
            exampleJson = "\"\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreatePaymentResponse>(exampleJson)
            : default(CreatePaymentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get payment
        /// </summary>
        /// <remarks>Retrieves the details of the payment with the paymentId provided in the URL.  This paymentId was returned to you with the create payment request. The request does not have any additional input parameters.</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <response code="200">Return the details of the payment</response>
        /// <response code="404">Payment not found</response>
        [HttpGet]
        [Route("/v1/{merchantId}/payments/{paymentId}")]
        [ValidateModelState]
        [SwaggerOperation("PaymentsGetPayment")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentResponse), description: "Return the details of the payment")]
        [SwaggerResponse(statusCode: 404, type: typeof(PaymentResponse), description: "Payment not found")]
        public virtual IActionResult PaymentsGetPayment([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PaymentResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(PaymentResponse));

            string exampleJson = null;
            exampleJson = "\"\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PaymentResponse>(exampleJson)
            : default(PaymentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create refund
        /// </summary>
        /// <remarks>You can refund any transaction by just calling this API.  The system will automatically select the most appropriate means to refund the transaction based on the payment product that was used for the payment and the currency and the country of the refund request.   Depending on the payment product of the payment you will need to supply refund specific details on where the money should be refunded to or not. You always have the option to refund just a portion of the payment amount. It is also possible to submit multiple refund requests on one payment as long as the total amount to be refunded does not exceed the total amount that was paid.</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <param name="request"></param>
        /// <response code="201">The refund was successfully created.</response>
        /// <response code="400">Bad request</response>
        /// <response code="404">The most common cause for this response id that the payment was not in a cancelable state.</response>
        [HttpPost]
        [Route("/v1/{merchantId}/payments/{paymentId}/refund")]
        [ValidateModelState]
        [SwaggerOperation("RefundsRefund")]
        [SwaggerResponse(statusCode: 201, type: typeof(RefundResponse), description: "The refund was successfully created.")]
        [SwaggerResponse(statusCode: 400, type: typeof(RefundErrorResponse), description: "Bad request")]
        [SwaggerResponse(statusCode: 404, type: typeof(RefundErrorResponse), description: "The most common cause for this response id that the payment was not in a cancelable state.")]
        public virtual IActionResult RefundsRefund([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId, [FromBody]RefundRequest request)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(RefundResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(RefundErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(RefundErrorResponse));

            string exampleJson = null;
            exampleJson = "\"\"";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RefundResponse>(exampleJson)
            : default(RefundResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get refunds of payment
        /// </summary>
        /// <remarks>Retrieves the details of all refunds performed on the payment with the paymentId provided in the URL.</remarks>
        /// <param name="merchantId">The Merchant Id</param>
        /// <param name="paymentId">The Payment Id</param>
        /// <response code="200">An HTTP 200 response is returned if the refunds were found.</response>
        [HttpGet]
        [Route("/v1/{merchantId}/payments/{paymentId}/refunds")]
        [ValidateModelState]
        [SwaggerOperation("RefundsRefunds")]
        [SwaggerResponse(statusCode: 200, type: typeof(RefundsResponse), description: "An HTTP 200 response is returned if the refunds were found.")]
        public virtual IActionResult RefundsRefunds([FromRoute][Required]string merchantId, [FromRoute][Required]string paymentId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RefundsResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"refunds\" : [ \"\", \"\" ]\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RefundsResponse>(exampleJson)
            : default(RefundsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

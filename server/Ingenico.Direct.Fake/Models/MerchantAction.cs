/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Ingenico.Direct.Fake.Models
{ 
    /// <summary>
    /// Object that contains the action, including the needed data, that you should perform next, like showing instructions, showing the transaction results or redirect to a third party to complete the payment
    /// </summary>
    [DataContract]
    public partial class MerchantAction : IEquatable<MerchantAction>
    { 
        /// <summary>
        /// Action merchants needs to take in the online payment process. Possible values are:   * REDIRECT - The customer needs to be redirected using the details found in redirectData   * SHOW_FORM - The customer needs to be shown a form with the fields found in formFields. You can submit the data entered by the user in a Complete payment request.   * SHOW_INSTRUCTIONS - The customer needs to be shown payment instruction using the details found in showData. Alternatively the instructions can be rendered by us using the instructionsRenderingData   * SHOW_TRANSACTION_RESULTS - The customer needs to be shown the transaction results using the details found in showData. Alternatively the instructions can be rendered by us using the instructionsRenderingData   * MOBILE_THREEDS_CHALLENGE - The customer needs to complete a challenge as part of the 3D Secure authentication inside your mobile app. The details contained in mobileThreeDSecureChallengeParameters need to be provided to the EMVco certified Mobile SDK as a challengeParameters object.   * CALL_THIRD_PARTY - The merchant needs to call a third party using the data found in thirdPartyData
        /// </summary>
        /// <value>Action merchants needs to take in the online payment process. Possible values are:   * REDIRECT - The customer needs to be redirected using the details found in redirectData   * SHOW_FORM - The customer needs to be shown a form with the fields found in formFields. You can submit the data entered by the user in a Complete payment request.   * SHOW_INSTRUCTIONS - The customer needs to be shown payment instruction using the details found in showData. Alternatively the instructions can be rendered by us using the instructionsRenderingData   * SHOW_TRANSACTION_RESULTS - The customer needs to be shown the transaction results using the details found in showData. Alternatively the instructions can be rendered by us using the instructionsRenderingData   * MOBILE_THREEDS_CHALLENGE - The customer needs to complete a challenge as part of the 3D Secure authentication inside your mobile app. The details contained in mobileThreeDSecureChallengeParameters need to be provided to the EMVco certified Mobile SDK as a challengeParameters object.   * CALL_THIRD_PARTY - The merchant needs to call a third party using the data found in thirdPartyData</value>
        [DataMember(Name="actionType")]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or Sets FormFields
        /// </summary>
        [DataMember(Name="formFields")]
        public List<PaymentProductField> FormFields { get; set; }

        /// <summary>
        /// Gets or Sets RedirectData
        /// </summary>
        [DataMember(Name="redirectData")]
        public RedirectData RedirectData { get; set; }

        /// <summary>
        /// Gets or Sets RenderingData
        /// </summary>
        [DataMember(Name="renderingData")]
        public string RenderingData { get; set; }

        /// <summary>
        /// Gets or Sets ShowData
        /// </summary>
        [DataMember(Name="showData")]
        public List<KeyValuePair> ShowData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantAction {\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  FormFields: ").Append(FormFields).Append("\n");
            sb.Append("  RedirectData: ").Append(RedirectData).Append("\n");
            sb.Append("  RenderingData: ").Append(RenderingData).Append("\n");
            sb.Append("  ShowData: ").Append(ShowData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MerchantAction)obj);
        }

        /// <summary>
        /// Returns true if MerchantAction instances are equal
        /// </summary>
        /// <param name="other">Instance of MerchantAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantAction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionType == other.ActionType ||
                    ActionType != null &&
                    ActionType.Equals(other.ActionType)
                ) && 
                (
                    FormFields == other.FormFields ||
                    FormFields != null &&
                    FormFields.SequenceEqual(other.FormFields)
                ) && 
                (
                    RedirectData == other.RedirectData ||
                    RedirectData != null &&
                    RedirectData.Equals(other.RedirectData)
                ) && 
                (
                    RenderingData == other.RenderingData ||
                    RenderingData != null &&
                    RenderingData.Equals(other.RenderingData)
                ) && 
                (
                    ShowData == other.ShowData ||
                    ShowData != null &&
                    ShowData.SequenceEqual(other.ShowData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActionType != null)
                    hashCode = hashCode * 59 + ActionType.GetHashCode();
                    if (FormFields != null)
                    hashCode = hashCode * 59 + FormFields.GetHashCode();
                    if (RedirectData != null)
                    hashCode = hashCode * 59 + RedirectData.GetHashCode();
                    if (RenderingData != null)
                    hashCode = hashCode * 59 + RenderingData.GetHashCode();
                    if (ShowData != null)
                    hashCode = hashCode * 59 + ShowData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MerchantAction left, MerchantAction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MerchantAction left, MerchantAction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

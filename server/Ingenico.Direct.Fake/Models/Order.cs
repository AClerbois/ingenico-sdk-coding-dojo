/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Ingenico.Direct.Fake.Models
{ 
    /// <summary>
    /// Order object containing order related data   Please note that this object is required to be able to submit the amount.
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    { 
        /// <summary>
        /// Gets or Sets AdditionalInput
        /// </summary>
        [DataMember(Name="additionalInput")]
        public AdditionalOrderInput AdditionalInput { get; set; }

        /// <summary>
        /// Gets or Sets AmountOfMoney
        /// </summary>
        [DataMember(Name="amountOfMoney")]
        public AmountOfMoney AmountOfMoney { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items")]
        public List<LineItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets References
        /// </summary>
        [DataMember(Name="references")]
        public OrderReferences References { get; set; }

        /// <summary>
        /// Gets or Sets Seller
        /// </summary>
        [DataMember(Name="seller")]
        public Seller Seller { get; set; }

        /// <summary>
        /// Gets or Sets ShoppingCart
        /// </summary>
        [DataMember(Name="shoppingCart")]
        public ShoppingCart ShoppingCart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  AdditionalInput: ").Append(AdditionalInput).Append("\n");
            sb.Append("  AmountOfMoney: ").Append(AmountOfMoney).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("  ShoppingCart: ").Append(ShoppingCart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdditionalInput == other.AdditionalInput ||
                    AdditionalInput != null &&
                    AdditionalInput.Equals(other.AdditionalInput)
                ) && 
                (
                    AmountOfMoney == other.AmountOfMoney ||
                    AmountOfMoney != null &&
                    AmountOfMoney.Equals(other.AmountOfMoney)
                ) && 
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    References == other.References ||
                    References != null &&
                    References.Equals(other.References)
                ) && 
                (
                    Seller == other.Seller ||
                    Seller != null &&
                    Seller.Equals(other.Seller)
                ) && 
                (
                    ShoppingCart == other.ShoppingCart ||
                    ShoppingCart != null &&
                    ShoppingCart.Equals(other.ShoppingCart)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdditionalInput != null)
                    hashCode = hashCode * 59 + AdditionalInput.GetHashCode();
                    if (AmountOfMoney != null)
                    hashCode = hashCode * 59 + AmountOfMoney.GetHashCode();
                    if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (References != null)
                    hashCode = hashCode * 59 + References.GetHashCode();
                    if (Seller != null)
                    hashCode = hashCode * 59 + Seller.GetHashCode();
                    if (ShoppingCart != null)
                    hashCode = hashCode * 59 + ShoppingCart.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

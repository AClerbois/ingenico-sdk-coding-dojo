/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Ingenico.Direct.Fake.Models
{ 
    /// <summary>
    /// Object containing additional data that will be used to assess the risk of fraud
    /// </summary>
    [DataContract]
    public partial class FraudFields : IEquatable<FraudFields>
    { 
        /// <summary>
        /// Gets or Sets AddressesAreIdentical
        /// </summary>
        [DataMember(Name="addressesAreIdentical")]
        public bool? AddressesAreIdentical { get; set; }

        /// <summary>
        /// Gets or Sets BlackListData
        /// </summary>
        [DataMember(Name="blackListData")]
        public string BlackListData { get; set; }

        /// <summary>
        /// Gets or Sets CardOwnerAddress
        /// </summary>
        [DataMember(Name="cardOwnerAddress")]
        public Address CardOwnerAddress { get; set; }

        /// <summary>
        /// Gets or Sets CustomerIpAddress
        /// </summary>
        [DataMember(Name="customerIpAddress")]
        public string CustomerIpAddress { get; set; }

        /// <summary>
        /// Gets or Sets DefaultFormFill
        /// </summary>
        [DataMember(Name="defaultFormFill")]
        public string DefaultFormFill { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFingerprintActivated
        /// </summary>
        [DataMember(Name="deviceFingerprintActivated")]
        public bool? DeviceFingerprintActivated { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFingerprintTransactionId
        /// </summary>
        [DataMember(Name="deviceFingerprintTransactionId")]
        public string DeviceFingerprintTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets GiftCardType
        /// </summary>
        [DataMember(Name="giftCardType")]
        public string GiftCardType { get; set; }

        /// <summary>
        /// Gets or Sets GiftMessage
        /// </summary>
        [DataMember(Name="giftMessage")]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Gets or Sets HasForgottenPwd
        /// </summary>
        [DataMember(Name="hasForgottenPwd")]
        public bool? HasForgottenPwd { get; set; }

        /// <summary>
        /// Gets or Sets HasPassword
        /// </summary>
        [DataMember(Name="hasPassword")]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Gets or Sets IsPreviousCustomer
        /// </summary>
        [DataMember(Name="isPreviousCustomer")]
        public bool? IsPreviousCustomer { get; set; }

        /// <summary>
        /// Gets or Sets OrderTimezone
        /// </summary>
        [DataMember(Name="orderTimezone")]
        public string OrderTimezone { get; set; }

        /// <summary>
        /// Gets or Sets ShipComments
        /// </summary>
        [DataMember(Name="shipComments")]
        public string ShipComments { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentTrackingNumber
        /// </summary>
        [DataMember(Name="shipmentTrackingNumber")]
        public string ShipmentTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShippingDetails
        /// </summary>
        [DataMember(Name="shippingDetails")]
        public FraudFieldsShippingDetails ShippingDetails { get; set; }

        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [DataMember(Name="userData")]
        public List<string> UserData { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website")]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudFields {\n");
            sb.Append("  AddressesAreIdentical: ").Append(AddressesAreIdentical).Append("\n");
            sb.Append("  BlackListData: ").Append(BlackListData).Append("\n");
            sb.Append("  CardOwnerAddress: ").Append(CardOwnerAddress).Append("\n");
            sb.Append("  CustomerIpAddress: ").Append(CustomerIpAddress).Append("\n");
            sb.Append("  DefaultFormFill: ").Append(DefaultFormFill).Append("\n");
            sb.Append("  DeviceFingerprintActivated: ").Append(DeviceFingerprintActivated).Append("\n");
            sb.Append("  DeviceFingerprintTransactionId: ").Append(DeviceFingerprintTransactionId).Append("\n");
            sb.Append("  GiftCardType: ").Append(GiftCardType).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  HasForgottenPwd: ").Append(HasForgottenPwd).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  IsPreviousCustomer: ").Append(IsPreviousCustomer).Append("\n");
            sb.Append("  OrderTimezone: ").Append(OrderTimezone).Append("\n");
            sb.Append("  ShipComments: ").Append(ShipComments).Append("\n");
            sb.Append("  ShipmentTrackingNumber: ").Append(ShipmentTrackingNumber).Append("\n");
            sb.Append("  ShippingDetails: ").Append(ShippingDetails).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FraudFields)obj);
        }

        /// <summary>
        /// Returns true if FraudFields instances are equal
        /// </summary>
        /// <param name="other">Instance of FraudFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudFields other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressesAreIdentical == other.AddressesAreIdentical ||
                    AddressesAreIdentical != null &&
                    AddressesAreIdentical.Equals(other.AddressesAreIdentical)
                ) && 
                (
                    BlackListData == other.BlackListData ||
                    BlackListData != null &&
                    BlackListData.Equals(other.BlackListData)
                ) && 
                (
                    CardOwnerAddress == other.CardOwnerAddress ||
                    CardOwnerAddress != null &&
                    CardOwnerAddress.Equals(other.CardOwnerAddress)
                ) && 
                (
                    CustomerIpAddress == other.CustomerIpAddress ||
                    CustomerIpAddress != null &&
                    CustomerIpAddress.Equals(other.CustomerIpAddress)
                ) && 
                (
                    DefaultFormFill == other.DefaultFormFill ||
                    DefaultFormFill != null &&
                    DefaultFormFill.Equals(other.DefaultFormFill)
                ) && 
                (
                    DeviceFingerprintActivated == other.DeviceFingerprintActivated ||
                    DeviceFingerprintActivated != null &&
                    DeviceFingerprintActivated.Equals(other.DeviceFingerprintActivated)
                ) && 
                (
                    DeviceFingerprintTransactionId == other.DeviceFingerprintTransactionId ||
                    DeviceFingerprintTransactionId != null &&
                    DeviceFingerprintTransactionId.Equals(other.DeviceFingerprintTransactionId)
                ) && 
                (
                    GiftCardType == other.GiftCardType ||
                    GiftCardType != null &&
                    GiftCardType.Equals(other.GiftCardType)
                ) && 
                (
                    GiftMessage == other.GiftMessage ||
                    GiftMessage != null &&
                    GiftMessage.Equals(other.GiftMessage)
                ) && 
                (
                    HasForgottenPwd == other.HasForgottenPwd ||
                    HasForgottenPwd != null &&
                    HasForgottenPwd.Equals(other.HasForgottenPwd)
                ) && 
                (
                    HasPassword == other.HasPassword ||
                    HasPassword != null &&
                    HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    IsPreviousCustomer == other.IsPreviousCustomer ||
                    IsPreviousCustomer != null &&
                    IsPreviousCustomer.Equals(other.IsPreviousCustomer)
                ) && 
                (
                    OrderTimezone == other.OrderTimezone ||
                    OrderTimezone != null &&
                    OrderTimezone.Equals(other.OrderTimezone)
                ) && 
                (
                    ShipComments == other.ShipComments ||
                    ShipComments != null &&
                    ShipComments.Equals(other.ShipComments)
                ) && 
                (
                    ShipmentTrackingNumber == other.ShipmentTrackingNumber ||
                    ShipmentTrackingNumber != null &&
                    ShipmentTrackingNumber.Equals(other.ShipmentTrackingNumber)
                ) && 
                (
                    ShippingDetails == other.ShippingDetails ||
                    ShippingDetails != null &&
                    ShippingDetails.Equals(other.ShippingDetails)
                ) && 
                (
                    UserData == other.UserData ||
                    UserData != null &&
                    UserData.SequenceEqual(other.UserData)
                ) && 
                (
                    Website == other.Website ||
                    Website != null &&
                    Website.Equals(other.Website)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddressesAreIdentical != null)
                    hashCode = hashCode * 59 + AddressesAreIdentical.GetHashCode();
                    if (BlackListData != null)
                    hashCode = hashCode * 59 + BlackListData.GetHashCode();
                    if (CardOwnerAddress != null)
                    hashCode = hashCode * 59 + CardOwnerAddress.GetHashCode();
                    if (CustomerIpAddress != null)
                    hashCode = hashCode * 59 + CustomerIpAddress.GetHashCode();
                    if (DefaultFormFill != null)
                    hashCode = hashCode * 59 + DefaultFormFill.GetHashCode();
                    if (DeviceFingerprintActivated != null)
                    hashCode = hashCode * 59 + DeviceFingerprintActivated.GetHashCode();
                    if (DeviceFingerprintTransactionId != null)
                    hashCode = hashCode * 59 + DeviceFingerprintTransactionId.GetHashCode();
                    if (GiftCardType != null)
                    hashCode = hashCode * 59 + GiftCardType.GetHashCode();
                    if (GiftMessage != null)
                    hashCode = hashCode * 59 + GiftMessage.GetHashCode();
                    if (HasForgottenPwd != null)
                    hashCode = hashCode * 59 + HasForgottenPwd.GetHashCode();
                    if (HasPassword != null)
                    hashCode = hashCode * 59 + HasPassword.GetHashCode();
                    if (IsPreviousCustomer != null)
                    hashCode = hashCode * 59 + IsPreviousCustomer.GetHashCode();
                    if (OrderTimezone != null)
                    hashCode = hashCode * 59 + OrderTimezone.GetHashCode();
                    if (ShipComments != null)
                    hashCode = hashCode * 59 + ShipComments.GetHashCode();
                    if (ShipmentTrackingNumber != null)
                    hashCode = hashCode * 59 + ShipmentTrackingNumber.GetHashCode();
                    if (ShippingDetails != null)
                    hashCode = hashCode * 59 + ShippingDetails.GetHashCode();
                    if (UserData != null)
                    hashCode = hashCode * 59 + UserData.GetHashCode();
                    if (Website != null)
                    hashCode = hashCode * 59 + Website.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FraudFields left, FraudFields right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FraudFields left, FraudFields right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

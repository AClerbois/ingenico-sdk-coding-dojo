/*
 * Ingenico Direct
 *
 *  # Introduction  The Ingenico Direct API has been designed as a REST API. It uses the HTTP protocol as its foundation. Each resource is accessible under a clearly named URL and the HTTP response codes are used to relay status. HTTP Verbs like GET and POST are used to interact with the resources. To support accessibility by clients directly, as opposed to your server, our servers support cross-origin resource sharing. We use JSON for all of our payloads, including error messages   All these characteristics mean that you will be able to use standard off the shelf software to interact with Ingenico ePayments. To make the integration even easier, Ingenico ePayments also has SDKs that wrap both the complete Server API as well as the complete Client API. 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Ingenico.Direct.Fake.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CardFraudResults : FraudResults, IEquatable<CardFraudResults>
    { 
        /// <summary>
        ///  Result of the Address Verification Service checks. Possible values are:   * A - Address (Street) matches, Zip does not   * B - Street address match for international transactionsÃ¢â‚¬â€Postal code not verified due to incompatible formats   * C - Street address and postal code not verified for international transaction due to incompatible formats   * D - Street address and postal code match for international transaction, cardholder name is incorrect   * E - AVS error   * F - Address does match and five digit ZIP code does match (UK only)   * G - Address information is unavailable; international transaction; non-AVS participant   * H - Billing address and postal code match, cardholder name is incorrect (Amex)   * I - Address information not verified for international transaction   * K - Cardholder name matches (Amex)   * L - Cardholder name and postal code match (Amex)   * M - Cardholder name, street address, and postal code match for international transaction   * N - No Match on Address (Street) or Zip   * O - Cardholder name and address match (Amex)   * P - Postal codes match for international transactionÃ¢â‚¬â€Street address not verified due to incompatible formats   * Q - Billing address matches, cardholder is incorrect (Amex)   * R - Retry, System unavailable or Timed out   * S - Service not supported by issuer   * U - Address information is unavailable   * W - 9 digit Zip matches, Address (Street) does not   * X - Exact AVS Match   * Y - Address (Street) and 5 digit Zip match   * Z - 5 digit Zip matches, Address (Street) does not   * 0 - No service available
        /// </summary>
        /// <value> Result of the Address Verification Service checks. Possible values are:   * A - Address (Street) matches, Zip does not   * B - Street address match for international transactionsÃ¢â‚¬â€Postal code not verified due to incompatible formats   * C - Street address and postal code not verified for international transaction due to incompatible formats   * D - Street address and postal code match for international transaction, cardholder name is incorrect   * E - AVS error   * F - Address does match and five digit ZIP code does match (UK only)   * G - Address information is unavailable; international transaction; non-AVS participant   * H - Billing address and postal code match, cardholder name is incorrect (Amex)   * I - Address information not verified for international transaction   * K - Cardholder name matches (Amex)   * L - Cardholder name and postal code match (Amex)   * M - Cardholder name, street address, and postal code match for international transaction   * N - No Match on Address (Street) or Zip   * O - Cardholder name and address match (Amex)   * P - Postal codes match for international transactionÃ¢â‚¬â€Street address not verified due to incompatible formats   * Q - Billing address matches, cardholder is incorrect (Amex)   * R - Retry, System unavailable or Timed out   * S - Service not supported by issuer   * U - Address information is unavailable   * W - 9 digit Zip matches, Address (Street) does not   * X - Exact AVS Match   * Y - Address (Street) and 5 digit Zip match   * Z - 5 digit Zip matches, Address (Street) does not   * 0 - No service available</value>
        [DataMember(Name="avsResult")]
        public string AvsResult { get; set; }

        /// <summary>
        ///  Result of the Card Verification Value checks. Possible values are:   * M - CVV check performed and valid value   * N - CVV checked and no match   * P - CVV check not performed, not requested   * S - Cardholder claims no CVV code on card, issuer states CVV-code should be on card   * U - Issuer not certified for CVV2   * Y - Server provider did not respond   * 0 - No service available
        /// </summary>
        /// <value> Result of the Card Verification Value checks. Possible values are:   * M - CVV check performed and valid value   * N - CVV checked and no match   * P - CVV check not performed, not requested   * S - Cardholder claims no CVV code on card, issuer states CVV-code should be on card   * U - Issuer not certified for CVV2   * Y - Server provider did not respond   * 0 - No service available</value>
        [DataMember(Name="cvvResult")]
        public string CvvResult { get; set; }

        /// <summary>
        /// Gets or Sets Fraugster
        /// </summary>
        [DataMember(Name="fraugster")]
        public FraugsterResults Fraugster { get; set; }

        /// <summary>
        /// Gets or Sets RetailDecisions
        /// </summary>
        [DataMember(Name="retailDecisions")]
        public FraudResultsRetailDecisions RetailDecisions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardFraudResults {\n");
            sb.Append("  AvsResult: ").Append(AvsResult).Append("\n");
            sb.Append("  CvvResult: ").Append(CvvResult).Append("\n");
            sb.Append("  Fraugster: ").Append(Fraugster).Append("\n");
            sb.Append("  RetailDecisions: ").Append(RetailDecisions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CardFraudResults)obj);
        }

        /// <summary>
        /// Returns true if CardFraudResults instances are equal
        /// </summary>
        /// <param name="other">Instance of CardFraudResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardFraudResults other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AvsResult == other.AvsResult ||
                    AvsResult != null &&
                    AvsResult.Equals(other.AvsResult)
                ) && 
                (
                    CvvResult == other.CvvResult ||
                    CvvResult != null &&
                    CvvResult.Equals(other.CvvResult)
                ) && 
                (
                    Fraugster == other.Fraugster ||
                    Fraugster != null &&
                    Fraugster.Equals(other.Fraugster)
                ) && 
                (
                    RetailDecisions == other.RetailDecisions ||
                    RetailDecisions != null &&
                    RetailDecisions.Equals(other.RetailDecisions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AvsResult != null)
                    hashCode = hashCode * 59 + AvsResult.GetHashCode();
                    if (CvvResult != null)
                    hashCode = hashCode * 59 + CvvResult.GetHashCode();
                    if (Fraugster != null)
                    hashCode = hashCode * 59 + Fraugster.GetHashCode();
                    if (RetailDecisions != null)
                    hashCode = hashCode * 59 + RetailDecisions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CardFraudResults left, CardFraudResults right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CardFraudResults left, CardFraudResults right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
